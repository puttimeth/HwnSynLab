$date
   Mon Nov  2 20:39:54 2020
$end
$version
  2019.1
$end
$timescale
  1ps
$end
$scope module nano_sc_system $end
$var wire 32 ! p_address [31:0] $end
$var wire 32 " p_data [31:0] $end
$var wire 32 # d_address [31:0] $end
$var wire 1 $ mem_wr $end
$var wire 32 % d_data [31:0] $end
$var reg 1 & clock $end
$var reg 1 ' nreset $end
$var wire 7 ( seg [6:0] $end
$var wire 1 ) dp $end
$var wire 4 * an [3:0] $end
$var wire 12 + sw [11:0] $end
$var wire 4 , num3 [3:0] $end
$var wire 4 - num2 [3:0] $end
$var wire 4 . num1 [3:0] $end
$var wire 4 / num0 [3:0] $end
$scope module q7seg $end
$var wire 7 ( seg [6:0] $end
$var wire 1 ) dp $end
$var wire 1 0 an0 $end
$var wire 1 1 an1 $end
$var wire 1 2 an2 $end
$var wire 1 3 an3 $end
$var wire 4 / num0 [3:0] $end
$var wire 4 . num1 [3:0] $end
$var wire 4 - num2 [3:0] $end
$var wire 4 , num3 [3:0] $end
$var wire 1 4 clk $end
$var reg 2 5 ns [1:0] $end
$var reg 2 6 ps [1:0] $end
$var reg 4 7 dispEn [3:0] $end
$var reg 4 8 hexIn [3:0] $end
$var wire 7 9 segments [6:0] $end
$scope module segDecode $end
$var reg 7 : segments [6:0] $end
$var wire 4 ; hex [3:0] $end
$upscope $end
$upscope $end
$scope module CPU $end
$var wire 32 ! p_address [31:0] $end
$var wire 32 " p_data [31:0] $end
$var wire 32 # d_address [31:0] $end
$var wire 1 $ mem_wr $end
$var wire 32 % d_data [31:0] $end
$var wire 1 < clock $end
$var wire 1 = nreset $end
$var wire 32 > instruction [31:0] $end
$var wire 6 ? opcode [5:0] $end
$var wire 5 @ rs [4:0] $end
$var wire 5 A rt [4:0] $end
$var wire 5 B rd [4:0] $end
$var wire 11 C reserved [10:0] $end
$var wire 16 D imm [15:0] $end
$var wire 26 E addr [25:0] $end
$var reg 32 F pc [31:0] $end
$var wire 1 G sel_addpc $end
$var wire 1 H sel_pc $end
$var wire 30 I pc_add [29:0] $end
$var wire 1 J pc_cout $end
$var wire 30 K pc_add_b [29:0] $end
$var wire 30 L addr_zeroext [29:0] $end
$var wire 30 M pc_new [29:0] $end
$var wire 32 N imm_ext [31:0] $end
$var wire 2 O ext_ops [1:0] $end
$var reg 1 P z_flag $end
$var reg 1 Q c_flag $end
$var wire 1 R reg_wr $end
$var wire 1 S sel_wr $end
$var wire 1 T sel_data $end
$var wire 1 U sel_b $end
$var wire 1 V z_new $end
$var wire 1 W c_new $end
$var wire 3 X alu_ops [2:0] $end
$var wire 32 Y A [31:0] $end
$var wire 32 Z B [31:0] $end
$var wire 32 [ data_selected [31:0] $end
$var wire 32 \ data_S [31:0] $end
$var wire 32 ] data_M [31:0] $end
$var wire 32 ^ B_selected [31:0] $end
$var wire 5 _ rw [4:0] $end
$scope module PCADDER $end
$var wire 30 I S [29:0] $end
$var wire 1 J Cout $end
$var wire 30 ` A [29:0] $end
$var wire 30 K B [29:0] $end
$var wire 1 a Cin $end
$var parameter 32 b WIDTH [31:0] $end
$upscope $end
$scope module MUXADDPC $end
$var wire 30 K out [29:0] $end
$var wire 30 c in0 [29:0] $end
$var wire 30 d in1 [29:0] $end
$var wire 1 G sel $end
$var parameter 32 e WIDTH [31:0] $end
$upscope $end
$scope module MUXSELPC $end
$var wire 30 M out [29:0] $end
$var wire 30 I in0 [29:0] $end
$var wire 30 L in1 [29:0] $end
$var wire 1 H sel $end
$var parameter 32 f WIDTH [31:0] $end
$upscope $end
$scope module EXTENDER $end
$var reg 32 g data32 [31:0] $end
$var wire 16 D data16 [15:0] $end
$var wire 2 O ext_ops [1:0] $end
$upscope $end
$scope module MUXRW $end
$var wire 5 _ out [4:0] $end
$var wire 5 B in0 [4:0] $end
$var wire 5 A in1 [4:0] $end
$var wire 1 S sel $end
$var parameter 32 h WIDTH [31:0] $end
$upscope $end
$scope module REGFILE $end
$var wire 32 Y A [31:0] $end
$var wire 32 Z B [31:0] $end
$var wire 32 [ data [31:0] $end
$var wire 5 @ ra [4:0] $end
$var wire 5 A rb [4:0] $end
$var wire 5 _ rw [4:0] $end
$var wire 1 i nwr $end
$var wire 1 < clock $end
$var integer 32 j i $end
$upscope $end
$scope module MUXDATA $end
$var wire 32 [ out [31:0] $end
$var wire 32 \ in0 [31:0] $end
$var wire 32 ] in1 [31:0] $end
$var wire 1 T sel $end
$var parameter 32 k WIDTH [31:0] $end
$upscope $end
$scope module MUXB $end
$var wire 32 ^ out [31:0] $end
$var wire 32 Z in0 [31:0] $end
$var wire 32 N in1 [31:0] $end
$var wire 1 U sel $end
$var parameter 32 l WIDTH [31:0] $end
$upscope $end
$scope module ALU $end
$var reg 32 m S [31:0] $end
$var wire 1 V z $end
$var reg 1 n Cout $end
$var wire 32 Y A [31:0] $end
$var wire 32 ^ B [31:0] $end
$var wire 1 o Cin $end
$var wire 3 X alu_ops [2:0] $end
$upscope $end
$scope module CONTROLUNIT $end
$var reg 1 p sel_pc $end
$var reg 1 q sel_addpc $end
$var reg 1 r sel_wr $end
$var reg 1 s sel_b $end
$var reg 1 t sel_data $end
$var reg 1 u reg_wr $end
$var reg 1 v mem_wr $end
$var reg 2 w ext_ops [1:0] $end
$var reg 3 x alu_ops [2:0] $end
$var wire 6 ? opcode [5:0] $end
$var wire 1 V z_flag $end
$var wire 11 C reserved [10:0] $end
$var parameter 6 y ORI [5:0] $end
$var parameter 6 z ORUI [5:0] $end
$var parameter 6 { ADD [5:0] $end
$var parameter 6 | LW [5:0] $end
$var parameter 6 } SW [5:0] $end
$var parameter 6 ~ BEQ [5:0] $end
$var parameter 6 !! JMP [5:0] $end
$upscope $end
$upscope $end
$scope module PROGMEM $end
$var wire 32 " data [31:0] $end
$var wire 27 "! address [26:0] $end
$var reg 32 #! mem $end
$var parameter 32 $! DATA_WIDTH [31:0] $end
$var parameter 32 %! ADDR_WIDTH [31:0] $end
$upscope $end
$scope module DATAMEM $end
$var wire 32 % data [31:0] $end
$var wire 27 &! address [26:0] $end
$var wire 1 $ wr $end
$var wire 1 '! clock $end
$var wire 4 (! num3 [3:0] $end
$var wire 4 )! num2 [3:0] $end
$var wire 4 *! num1 [3:0] $end
$var wire 4 +! num0 [3:0] $end
$var wire 12 ,! sw [11:0] $end
$var reg 32 -! mem $end
$var reg 32 .! data_out [31:0] $end
$var integer 32 /! i $end
$var parameter 32 0! DATA_WIDTH [31:0] $end
$var parameter 32 1! ADDR_WIDTH [31:0] $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
bx !
b110000 !!
bx "
bx "!
bx #
b100000001010111110000001000000 #!
x$
b100000 $!
bx %
b11011 %!
0&
bx &!
0'
0'!
bx (
bx (!
0)
bx )!
bx *
bx *!
bz +
bx +!
bz ,
bx ,!
bz -
b1000000001011000000000001000000 -!
bz .
bx .!
bz /
bx /!
x0
b100000 0!
x1
b11011 1!
x2
x3
04
bx 5
bx 6
bx 7
bx 8
bx 9
bx :
bx ;
0<
0=
bx >
bx ?
bx @
bx A
bx B
bx C
bx D
bx E
bx F
xG
xH
bx I
xJ
bx K
b0xxxxxxxxxxxxxxxxxxxxxxxxxx L
bx M
bx N
bx O
xP
xQ
xR
xS
xT
xU
xV
xW
bx X
bx Y
bx Z
bx [
bx \
bx ]
bx ^
bx _
bx `
1a
b11110 b
b0 c
bx d
b11110 e
b11110 f
bx g
b101 h
xi
b100000 j
b100000 k
b100000 l
bx m
xn
xo
xp
xq
xr
xs
xt
xu
xv
bx w
bx x
b10000 y
b10001 z
b1 {
b11000 |
b11100 }
b100100 ~
$end
#20000
b0 !
b1000000100001001111111111100000 "
b0 "!
b1111111111100000 #
0$
bx %
1&
b11111111111000 &!
1'!
bx .!
14
bx 6
1<
b1000000100001001111111111100000 >
b10000 ?
b100 @
b100 A
b11111 B
b11111100000 C
b1111111111100000 D
b100001001111111111100000 E
b0 F
0G
0H
b1 I
0J
b0 K
b100001001111111111100000 L
b1 M
b1111111111100000 N
b0 O
0P
0Q
1R
1S
0T
1U
0V
0W
b10 X
b0 Y
b0 Z
b1111111111100000 [
b1111111111100000 \
b1111111111100000 ^
b100 _
b0 `
b1111111111100000 d
b1111111111100000 g
0i
b1111111111100000 m
0n
0o
0p
0q
1r
1s
0t
1u
0v
b0 w
b10 x
#40000
0&
1'
0'!
04
0<
1=
#60000
b100 !
b1000000110001100000000000000100 "
b1 "!
b100 #
b10 %
1&
b1 &!
1'!
b10 .!
14
bx 6
1<
b1000000110001100000000000000100 >
b10000 ?
b110 @
b110 A
b0 B
b100 C
b100 D
b110001100000000000000100 E
b100 F
b10 I
0J
b0 K
b110001100000000000000100 L
b10 M
b100 N
0V
b0 Y
b0 Z
b100 [
b100 \
b10 ]
b100 ^
b110 _
b1 `
b100 d
b100 g
b100 m
0n
b10 x
#80000
0&
0'!
04
0<
#100000
b1000 !
b1110000100001100000000000000000 "
b10 "!
b1111111111100000 #
1$
b100 %
1&
b11111111111000 &!
1'!
bx .!
14
bx 6
1<
b1110000100001100000000000000000 >
b11100 ?
b100 @
b110 A
b0 B
b0 C
b0 D
b100001100000000000000000 E
b1000 F
b11 I
0J
b0 K
b100001100000000000000000 L
b11 M
b0 N
b1 O
0R
0S
0V
b0 X
b1111111111100000 Y
b100 Z
b1111111111100000 [
b1111111111100000 \
b100 ]
b0 ^
b0 _
b10 `
b0 d
b0 g
1i
b1111111111100000 m
0n
0p
0q
0r
1s
0t
0u
1v
b1 w
b0 x
#120000
0&
0'!
04
0<
#140000
b1100 !
b1110000100001100000000000000100 "
b11 "!
b1111111111100100 #
1&
b11111111111001 &!
1'!
bx .!
14
bx 6
1<
b1110000100001100000000000000100 >
b11100 ?
b100 @
b110 A
b0 B
b100 C
b100 D
b100001100000000000000100 E
b1100 F
b100 I
0J
b0 K
b100001100000000000000100 L
b100 M
b100 N
0V
b1111111111100100 [
b1111111111100100 \
b100 ^
b11 `
b100 d
b100 g
b1111111111100100 m
0n
b0 x
#160000
0&
0'!
04
0<
#180000
b10000 !
b1110000100001100000000000001000 "
b100 "!
b1111111111101000 #
1&
b11111111111010 &!
1'!
bx .!
14
bx 6
1<
b1110000100001100000000000001000 >
b11100 ?
b100 @
b110 A
b0 B
b1000 C
b1000 D
b100001100000000000001000 E
b10000 F
b101 I
0J
b0 K
b100001100000000000001000 L
b101 M
b1000 N
0V
b1111111111101000 [
b1111111111101000 \
b1000 ^
b100 `
b1000 d
b1000 g
b1111111111101000 m
0n
b0 x
#200000
0&
0'!
04
0<
#220000
b10100 !
b1110000100001100000000000001100 "
b101 "!
b1111111111101100 #
1&
b11111111111011 &!
1'!
bx .!
14
bx 6
1<
b1110000100001100000000000001100 >
b11100 ?
b100 @
b110 A
b0 B
b1100 C
b1100 D
b100001100000000000001100 E
b10100 F
b110 I
0J
b0 K
b100001100000000000001100 L
b110 M
b1100 N
0V
b1111111111101100 [
b1111111111101100 \
b1100 ^
b101 `
b1100 d
b1100 g
b1111111111101100 m
0n
b0 x
#240000
0&
0'!
04
0<
#260000
b11000 !
bx "
b110 "!
bx #
0$
bx %
1&
bx &!
1'!
bx .!
14
bx 6
1<
bx >
bx ?
bx @
bx A
bx B
bx C
bx D
bx E
b11000 F
b111 I
0J
b0 K
b0xxxxxxxxxxxxxxxxxxxxxxxxxx L
b111 M
b0xxxxxxxxxxxxxxxx N
b0 O
0U
xV
xW
bx Y
bx Z
bx [
bx \
bx ]
bx ^
bx _
b110 `
b0xxxxxxxxxxxxxxxx d
b0xxxxxxxxxxxxxxxx g
bx m
xn
0p
0q
0r
0s
0t
0u
0v
b0 w
b0 x
#280000
0&
0'!
04
0<
#300000
b11100 !
bx "
b111 "!
1&
1'!
14
bx 6
1<
b11100 F
b1000 I
0J
b1000 M
xP
xQ
b111 `
xo
#320000
0&
0'!
04
0<
#340000
b100000 !
bx "
b1000 "!
1&
1'!
14
bx 6
1<
b100000 F
b1001 I
0J
b1001 M
b1000 `
#360000
0&
0'!
04
0<
#380000
b100100 !
bx "
b1001 "!
1&
1'!
14
bx 6
1<
b100100 F
b1010 I
0J
b1010 M
b1001 `
#400000
0&
0'!
04
0<
#420000
b101000 !
bx "
b1010 "!
1&
1'!
14
bx 6
1<
b101000 F
b1011 I
0J
b1011 M
b1010 `
#440000
0&
0'!
04
0<
#460000
b101100 !
bx "
b1011 "!
1&
1'!
14
bx 6
1<
b101100 F
b1100 I
0J
b1100 M
b1011 `
#480000
0&
0'!
04
0<
#500000
b110000 !
bx "
b1100 "!
1&
1'!
14
bx 6
1<
b110000 F
b1101 I
0J
b1101 M
b1100 `
#520000
0&
0'!
04
0<
#540000
b110100 !
bx "
b1101 "!
1&
1'!
14
bx 6
1<
b110100 F
b1110 I
0J
b1110 M
b1101 `
#560000
0&
0'!
04
0<
#580000
b111000 !
bx "
b1110 "!
1&
1'!
14
bx 6
1<
b111000 F
b1111 I
0J
b1111 M
b1110 `
#600000
0&
0'!
04
0<
#620000
b111100 !
bx "
b1111 "!
1&
1'!
14
bx 6
1<
b111100 F
b10000 I
0J
b10000 M
b1111 `
#640000
0&
0'!
04
0<
#660000
b1000000 !
bx "
b10000 "!
1&
1'!
14
bx 6
1<
b1000000 F
b10001 I
0J
b10001 M
b10000 `
#680000
0&
0'!
04
0<
#700000
b1000100 !
bx "
b10001 "!
1&
1'!
14
bx 6
1<
b1000100 F
b10010 I
0J
b10010 M
b10001 `
#720000
0&
0'!
04
0<
#740000
b1001000 !
bx "
b10010 "!
1&
1'!
14
bx 6
1<
b1001000 F
b10011 I
0J
b10011 M
b10010 `
#760000
0&
0'!
04
0<
#780000
b1001100 !
bx "
b10011 "!
1&
1'!
14
bx 6
1<
b1001100 F
b10100 I
0J
b10100 M
b10011 `
#800000
0&
0'!
04
0<
#820000
b1010000 !
bx "
b10100 "!
1&
1'!
14
bx 6
1<
b1010000 F
b10101 I
0J
b10101 M
b10100 `
#840000
0&
0'!
04
0<
#860000
b1010100 !
bx "
b10101 "!
1&
1'!
14
bx 6
1<
b1010100 F
b10110 I
0J
b10110 M
b10101 `
#880000
0&
0'!
04
0<
#900000
b1011000 !
bx "
b10110 "!
1&
1'!
14
bx 6
1<
b1011000 F
b10111 I
0J
b10111 M
b10110 `
#920000
0&
0'!
04
0<
#940000
b1011100 !
bx "
b10111 "!
1&
1'!
14
bx 6
1<
b1011100 F
b11000 I
0J
b11000 M
b10111 `
#960000
0&
0'!
04
0<
#980000
b1100000 !
bx "
b11000 "!
1&
1'!
14
bx 6
1<
b1100000 F
b11001 I
0J
b11001 M
b11000 `
#1000000
0&
0'!
04
0<
